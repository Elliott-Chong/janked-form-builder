// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model FormSchema {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    description String?
    archived    Boolean  @default(false)
    imageUrl    String?
    createdById String
    createdBy   User     @relation(fields: [createdById], references: [id])
    published   Boolean  @default(false)

    formFields     FormField[]
    formSubmission formSubmission[]
}

model FormField {
    id          String  @id @default(cuid())
    name        String
    description String?

    order Int

    formFieldType FormFieldType
    required      Boolean       @default(false)
    isInput       Boolean       @default(false)

    formSchema   FormSchema @relation(fields: [formSchemaId], references: [id])
    formSchemaId String
    options      String?

    formValues FormValue[]
}

model FormValue {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    formFieldId String
    formField   FormField @relation(fields: [formFieldId], references: [id])

    value            String          @default("")
    User             User?           @relation(fields: [userId], references: [id])
    userId           String?
    formSubmission   formSubmission? @relation(fields: [formSubmissionId], references: [id])
    formSubmissionId String?
}

model formSubmission {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    formSchemaId String
    formSchema   FormSchema @relation(fields: [formSchemaId], references: [id])
    completed    Boolean    @default(false)
    userEmail    String

    formValues FormValue[]
}

enum FormFieldType {
    TEXT
    TEXTAREA
    SELECT
    HEADING
    PARAGRAPH
    SPACER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    FormValue     FormValue[]
    FormSchema    FormSchema[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
