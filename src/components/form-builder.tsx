/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/zSkLYeoqWgU
 */
import type { FormField, FormSchema } from "@prisma/client";
import React from "react";
import FormBuilderTopCard from "./FormBuilderTopCard";
import {
  SortableContext,
  arrayMove,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import FormFieldAdderButtons from "./FormFieldAdderButtons";
import {
  DndContext,
  type DragEndEvent,
  closestCenter,
  useSensor,
  MouseSensor,
  TouchSensor,
  KeyboardSensor,
  useSensors,
  PointerSensor,
} from "@dnd-kit/core";
import FormFieldRow from "./FormFieldRow";
import { api } from "@/utils/api";
import { useRouter } from "next/router";
import ResponsesTable from "./ResponsesTable";
import { cn } from "@/lib/utils";
import Link from "next/link";

type Props = {
  formSchema: FormSchema & {
    formFields: FormField[];
  };
};

export function FormBuilder({ formSchema }: Props) {
  const router = useRouter();
  React.useEffect(() => {
    if (!router.query.tab) {
      router.push(`/builder/${formSchema.id}?tab=edit`).catch(console.error);
    }
  }, [router, formSchema.id]);
  const { data: formFields } = api.form.getAllFormFields.useQuery(
    {
      formSchemaId: formSchema.id,
    },
    {
      initialData: formSchema.formFields,
      staleTime: Infinity,
    },
  );
  const [_formFields, setFormFields] = React.useState(formFields);
  const rearrangeFields = api.form.rearrangeFields.useMutation();
  React.useEffect(() => {
    setFormFields(formFields);
  }, [formFields]);

  const onDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (active.id === over?.id) return;
    setFormFields((formFields) => {
      const oldIndex = formFields.findIndex(
        (formField) => formField.id === active.id,
      );
      const newIndex = formFields.findIndex(
        (formField) => formField.id === over?.id,
      );
      const newFields = arrayMove(formFields, oldIndex, newIndex);
      rearrangeFields
        .mutateAsync({
          formSchemaId: formSchema.id,
          fieldIds: newFields.map((formField) => formField.id),
        })
        .catch(console.error);

      return newFields;
    });
  };

  const mouseSensor = useSensor(MouseSensor, {
    activationConstraint: {
      distance: 10,
    },
  });
  const pointerSensor = useSensor(PointerSensor, {
    activationConstraint: {
      distance: 10,
    },
  });
  const touchSensor = useSensor(TouchSensor);
  const keyboardSensor = useSensor(KeyboardSensor, {
    keyboardCodes: {
      start: [""],
      cancel: [""],
      end: [""],
    },
  });
  const sensors = useSensors(
    mouseSensor,
    touchSensor,
    keyboardSensor,
    pointerSensor,
  );

  return (
    <div className="">
      <FormBuilderTopCard formScehma={formSchema} />
      <div className="h-8"></div>
      <div className="hidden sm:block">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8" aria-label="Tabs">
            {[
              {
                name: "Edit",
                tab: `edit`,
              },
              {
                name: "Responses",
                tab: `responses`,
              },
            ].map((tab) => (
              <Link
                key={tab.name}
                href={{
                  href: `/builder/${formSchema.id}`,
                  query: {
                    ...router.query,
                    tab: tab.tab,
                  },
                }}
                className={cn(
                  router.query.tab === tab.tab
                    ? "border-gray-500 text-gray-600"
                    : "border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700",
                  "whitespace-nowrap border-b-2 px-1 py-4 text-sm font-medium",
                )}
              >
                {tab.name}
              </Link>
            ))}
          </nav>
        </div>
      </div>
      <div className="h-4"></div>
      {router.query.tab === "responses" ? (
        <ResponsesTable formSchemaId={formSchema.id} />
      ) : (
        <>
          <div className="grid grid-cols-1 gap-4">
            <DndContext
              collisionDetection={closestCenter}
              onDragEnd={onDragEnd}
              sensors={sensors}
            >
              <SortableContext
                strategy={verticalListSortingStrategy}
                items={formFields}
              >
                {_formFields.map((formField) => {
                  return (
                    <FormFieldRow formField={formField} key={formField.id} />
                  );
                })}
              </SortableContext>
            </DndContext>
            <FormFieldAdderButtons formSchemaId={formSchema.id} />
          </div>
        </>
      )}
    </div>
  );
}
