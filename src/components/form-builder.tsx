/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/zSkLYeoqWgU
 */
import type { FormField, FormSchema } from "@prisma/client";
import React from "react";
import FormBuilderTopCard from "./FormBuilderTopCard";
import {
  SortableContext,
  arrayMove,
  verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import FormFieldAdderButtons from "./FormFieldAdderButtons";
import { DndContext, type DragEndEvent, closestCenter } from "@dnd-kit/core";
import FormFieldRow from "./FormFieldRow";
import { api } from "@/utils/api";

type Props = {
  formSchema: FormSchema & {
    formFields: FormField[];
  };
};

export function FormBuilder({ formSchema }: Props) {
  const { data: formFields } = api.form.getAllFormFields.useQuery(
    {
      formSchemaId: formSchema.id,
    },
    {
      initialData: formSchema.formFields,
      staleTime: Infinity,
    },
  );
  const [_formFields, setFormFields] = React.useState(formFields);
  const rearrangeFields = api.form.rearrangeFields.useMutation();
  React.useEffect(() => {
    setFormFields(formFields);
  }, [formFields]);

  const onDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    if (active.id === over?.id) return;
    setFormFields((formFields) => {
      const oldIndex = formFields.findIndex(
        (formField) => formField.id === active.id,
      );
      const newIndex = formFields.findIndex(
        (formField) => formField.id === over?.id,
      );
      const newFields = arrayMove(formFields, oldIndex, newIndex);
      rearrangeFields
        .mutateAsync({
          formSchemaId: formSchema.id,
          fieldIds: newFields.map((formField) => formField.id),
        })
        .catch(console.error);

      return newFields;
    });
  };

  return (
    <div className="">
      <FormBuilderTopCard formScehma={formSchema} />
      <div className="h-8"></div>
      <div className="grid grid-cols-1 gap-4">
        <DndContext collisionDetection={closestCenter} onDragEnd={onDragEnd}>
          <SortableContext
            strategy={verticalListSortingStrategy}
            items={formFields}
          >
            {_formFields.map((formField) => {
              return <FormFieldRow formField={formField} key={formField.id} />;
            })}
          </SortableContext>
        </DndContext>
        <FormFieldAdderButtons formSchemaId={formSchema.id} />
      </div>
    </div>
  );
}
